# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nf7ks_KOveLhDSL06b4YHwoJmkkW2jMO
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns
import pmdarima as pm
from pmdarima.arima import auto_arima
from sklearn.metrics import r2_score
import math
from sklearn.metrics import mean_squared_error
from matplotlib import pyplot
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
from keras.preprocessing.sequence import TimeseriesGenerator
from sklearn.preprocessing import MinMaxScaler, StandardScaler
import tensorflow as tf
#from mpl_axes_aligner import shift

mpl.rcParams['figure.figsize']=(10,8)
mpl.rcParams['axes.grid']=False  

# %matplotlib inline 
mpl.rcParams['figure.figsize']=(10,8)
mpl.rcParams['axes.grid']=False

#DATASET 1
array=[]
mean_err_arima=[]
mean_err_lstm=[]

for i in range(1,301):
      df=pd.read_csv('user_'+str(i)+'_syn.csv')
      df_id=pd.DataFrame(df)
      #ARIMA
      print("-------------------------------------------user "+str(i)+"-------------------------------------------")
      k=len(df_id)
      train, test =train_test_split(df_id,test_size=0.25,shuffle=False)
      arima_model =  auto_arima(train,start_p=0, start_q=1, d=1, 
                          max_p=5, max_q=2, max_d=2, start_P=0, 
                          start_Q=0, max_P=5, max_D=2, D=1,
                          max_Q=5, m=2, seasonal=True, test='adf',
                         error_action='warn',trace = True,method='nm',
                        supress_warnings=True,stepwise = True)
      prediction = pd.DataFrame(arima_model.predict(n_periods = len(test)),index=test.index)
      test.rename(columns = {'Synthetic_data':'True_data'}, inplace = True)
      prediction.rename(columns = {0:'Pred_data'}, inplace = True)
      prediction  = prediction.reset_index(drop=True)
      test = test.reset_index(drop=True)
      print("---------------------------------mean_squared_error----------------------------------")
      print(math.sqrt(mean_squared_error(test,prediction)))
      mean_err_arima.append(math.sqrt(mean_squared_error(test,prediction)))
      r = pd.concat([prediction,test], axis=1)
      #print(r)
      #r.to_csv('user_'+str(i)+'_Arima.csv',
               #index = None)
      #LSTM
      print("-------------------------------------------user "+str(i)+"-------------------------------------------")
      scaler=MinMaxScaler(feature_range=(0,1))
      data_scaled=scaler.fit_transform(np.array(df_id).reshape(-1,1))
      #storing the data_scaled as features and target is how the data should be printed
      features =data_scaled
      target=data_scaled
      x_train,x_test,y_train, y_test=train_test_split(features,target,test_size=0.25,shuffle=False)
      win_length=3
      batch_size=32
      num_features=1
      train_generator=TimeseriesGenerator(x_train,y_train, length=win_length,batch_size=32)
      test_generator=TimeseriesGenerator(x_test,y_test, length=win_length,batch_size=32)
      print("-----------------------------training ............                  ---------------------------------")
      mean_err=[]
      #training the model
      model =tf.keras.Sequential()
      model.add(tf.keras.layers.LSTM(batch_size, input_shape=(win_length, num_features), return_sequences=False))
      model.add(tf.keras.layers.LeakyReLU(alpha=0.5))
      model.add(tf.keras.layers.Dense(1))
      model.compile(loss=tf.losses.MeanSquaredError(),
              optimizer=tf.optimizers.Adam(),
              metrics=[tf.metrics.MeanAbsoluteError()])
      history=model.fit_generator(train_generator,epochs=30,
                              validation_data=test_generator,
                              shuffle=False)
      print("-----------------------------------model evaluator----------------------------------")
      model.evaluate_generator(test_generator,verbose=0)
      predictions = model.predict_generator(test_generator)
      x_test=x_test[:,:][win_length:]
      rev_trans=scaler.inverse_transform(predictions)
      rev_true=scaler.inverse_transform(x_test)
      rev_train=scaler.inverse_transform(x_train)
      df_pred=pd.DataFrame(rev_trans)
      df_true=pd.DataFrame(rev_true)
      train=pd.DataFrame(rev_train)
      df_true.rename(columns = {0:'True_data'}, inplace = True)
      #print(df_true)
      df_pred.rename(columns = {0:'Pred_data'}, inplace = True)
      #print(df_pred)
      print("---------------------------------mean_squared_error----------------------------------")
      print(math.sqrt(mean_squared_error(df_true,df_pred)))
      mean_err_lstm.append(math.sqrt(mean_squared_error(df_true,df_pred)))
      r = pd.concat([df_pred,df_true], axis=1)
      #print(r)
      #r.to_csv('user_'+str(i)+'_LSTM.csv', index = None)
      pyplot.subplot(1, 1, 1)
      pyplot.plot(prediction, label="Predicted_data_ARIMA")
      pyplot.plot(test, label="True_data")
      pyplot.plot(df_pred, label="Predicted_data_LSTM")
      pyplot.xlabel('next access')
      pyplot.ylabel('Time normalized')
      pyplot.legend()
      #pyplot.savefig('plot_'+str(i)+'.png')
      pyplot.show()
      plt.clf()

pyplot.subplot(1,1,1)
pyplot.plot(mean_err_arima, label="Error in LSTM")
pyplot.plot(mean_err_lstm, label="Error in ARIMA")
pyplot.xlabel('user')
pyplot.ylabel('Error in models')
pyplot.legend()
pyplot.savefig('error_'+str(i)+'.png')
pyplot.show()

#DATASET 2
array=[]
mean_err_arima=[]
mean_err_lstm=[]

for i in range(0,200):
      df=pd.read_csv('user_'+str(i)+'.csv')
      df_id=pd.DataFrame(df)
      #ARIMA
      print("-------------------------------------------user "+str(i)+"-------------------------------------------")
      k=len(df_id)
      train, test =train_test_split(df_id,test_size=0.25,shuffle=False)
      arima_model =  auto_arima(train,start_p=0, start_q=0, d=1, 
                          max_p=5, max_q=2, max_d=2, start_P=0, 
                          start_Q=0, max_P=5, max_D=2, D=1,
                          max_Q=5, m=12, seasonal=False, test='adf',
                         error_action='warn',trace = True,method='nm',
                        supress_warnings=True,stepwise = True)
      prediction = pd.DataFrame(arima_model.predict(n_periods = len(test)),index=test.index)
      test.rename(columns = {'Synthetic_data':'True_data'}, inplace = True)
      prediction.rename(columns = {0:'Pred_data'}, inplace = True)
      prediction  = prediction.reset_index(drop=True)
      test = test.reset_index(drop=True)
      print("---------------------------------mean_squared_error----------------------------------")
      prediction=prediction.fillna(0)
      test=test.fillna(0)
      print(math.sqrt(mean_squared_error(test,prediction)))
      mean_err_arima.append(math.sqrt(mean_squared_error(test,prediction)))
      r = pd.concat([prediction,test], axis=1)
      #print(r)
      #r.to_csv('user_'+str(i)+'_Arima.csv',
               index = None)
      print("-------------------------------------------user "+str(i)+"-------------------------------------------")
      scaler=MinMaxScaler(feature_range=(0,1))
      data_scaled=scaler.fit_transform(np.array(df_id).reshape(-1,1))
      #storing the data_scaled as features and target is how the data should be printed
      features =data_scaled
      target=data_scaled
      x_train,x_test,y_train, y_test=train_test_split(features,target,test_size=0.25,shuffle=False)
      win_length=3
      batch_size=32
      num_features=1
      train_generator=TimeseriesGenerator(x_train,y_train, length=win_length,batch_size=32)
      test_generator=TimeseriesGenerator(x_test,y_test, length=win_length,batch_size=32)
      print("-----------------------------training ............                  ---------------------------------")
      mean_err=[]
      #training the model
      model =tf.keras.Sequential()
      model.add(tf.keras.layers.LSTM(batch_size, input_shape=(win_length, num_features), return_sequences=False))
      model.add(tf.keras.layers.LeakyReLU(alpha=0.5))
      model.add(tf.keras.layers.Dense(1))
      model.compile(loss=tf.losses.MeanSquaredError(),
              optimizer=tf.optimizers.Adam(),
              metrics=[tf.metrics.MeanAbsoluteError()])
      history=model.fit_generator(train_generator,epochs=10,
                              validation_data=test_generator,
                              shuffle=False)
      print("-----------------------------------model evaluator----------------------------------")
      model.evaluate_generator(test_generator,verbose=0)
      predictions = model.predict_generator(test_generator)
      x_test=x_test[:,:][win_length:]
      rev_trans=scaler.inverse_transform(predictions)
      rev_true=scaler.inverse_transform(x_test)
      rev_train=scaler.inverse_transform(x_train)
      df_pred=pd.DataFrame(rev_trans)
      df_true=pd.DataFrame(rev_true)
      train=pd.DataFrame(rev_train)
      df_true.rename(columns = {0:'True_data'}, inplace = True)
      #print(df_true)
      df_pred.rename(columns = {0:'Pred_data'}, inplace = True)
      #print(df_pred)
      print("---------------------------------mean_squared_error----------------------------------")
      #mean_err_lstm=math.sqrt(mean_squared_error(df_true,df_pred))
      df_true=df_true.fillna(0)
      df_pred=df_pred.fillna(0)
      print(math.sqrt(mean_squared_error(df_true,df_pred)))
      mean_err_lstm.append(math.sqrt(mean_squared_error(df_true,df_pred)))
      r = pd.concat([df_pred,df_true], axis=1)
      #print(r)
      #r.to_csv('user_'+str(i)+'_LSTM.csv', index = None)
      pyplot.subplot(1, 1, 1)
      pyplot.plot(prediction, label="Predicted_data_ARIMA")
      pyplot.plot(test, label="True_data")
      pyplot.plot(df_pred, label="Predicted_data_LSTM")
      pyplot.xlabel('next access')
      pyplot.ylabel('Time normalized')
      pyplot.legend()
      #pyplot.savefig('plot_'+str(i)+'.png')
      pyplot.show()
      plt.clf()

pyplot.subplot(1,1,1)
pyplot.plot(mean_err_arima, label="Error in LSTM")
pyplot.plot(mean_err_lstm, label="Error in ARIMA")
pyplot.xlabel('user')
pyplot.ylabel('Error in models')
pyplot.legend()
pyplot.savefig('error_'+str(i)+'.png')
pyplot.show()