# -*- coding: utf-8 -*-
"""Synthetic_GAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-uAq4D3qsw28LR-OglNtisOW5Us4wWY4
"""

# train a generative adversarial network on a one-dimensional function
from numpy import hstack
from numpy import zeros
from numpy import ones
from numpy.random import rand
from numpy.random import randn
from keras.models import Sequential
from keras.layers import Dense
from matplotlib import pyplot
import pandas as pd
from numpy.random import rand, randn, randint
import random
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import pyplot as plt

for i in range(1,301):
		d_hist, g_hist, a_hist = list(), list(), list()
		df = pd.read_csv(r'user_'+str(i)+'.csv')
		df = df['True_data']

		X_data = df.to_numpy()

		# define the standalone discriminator model
		def define_discriminator(n_inputs=1):
			model = Sequential()
			model.add(Dense(25, activation='relu', kernel_initializer='he_uniform', input_dim=n_inputs))
			model.add(Dense(1, activation='sigmoid'))
			# compile model
			model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
			return model

		# define the standalone generator model
		def define_generator(latent_dim, n_outputs=1):
			model = Sequential()
			model.add(Dense(15, activation='relu', kernel_initializer='he_uniform', input_dim=latent_dim))
			model.add(Dense(n_outputs, activation='linear'))
			return model

		# define the combined generator and discriminator model, for updating the generator
		def define_gan(generator, discriminator):
			# make weights in the discriminator not trainable
			discriminator.trainable = False
			# connect them
			model = Sequential()
			# add generator
			model.add(generator)
			# add the discriminator
			model.add(discriminator)
			# compile model
			model.compile(loss='binary_crossentropy', optimizer='adam')
			return model

		# generate n real samples with class labels
		def generate_real_samples(n):
			i = randint(0, X_data.shape[0], n)
			X1 = X_data[i]
			# generate outputs X^2
			# stack arrays
			X = X1.reshape(n, 1)
			# generate class labels
			y = ones((n, 1))
			return X, y

		# generate points in latent space as input for the generator
		def generate_latent_points(latent_dim, n):
			# generate points in the latent space
			x_input = np.array([random.uniform(0, 1) for i in range(latent_dim*n)])
			# reshape into a batch of inputs for the network
			x_input = x_input.reshape(n, latent_dim)
			return x_input

		# use the generator to generate n fake examples, with class labels
		def generate_fake_samples(generator, latent_dim, n):
			# generate points in latent space
			x_input = np.array([random.random() for i in range(latent_dim*n)]).reshape(n, latent_dim)
			# predict outputs
			X = generator.predict(x_input)
			# create class labels
			y = zeros((n, 1))
			return X, y

		# evaluate the discriminator and plot real and fake points
		def summarize_performance(epoch, generator, discriminator, latent_dim, n=100):
			# prepare real samples
			x_real, y_real = generate_real_samples(n)
			# prepare fake examples
			x_fake, y_fake = generate_fake_samples(generator, latent_dim, n)
			# evaluate discriminator on fake examples
			_, acc_fake = discriminator.evaluate(x_fake, y_fake, verbose=0)
			# summarize discriminator performance
			print(epoch, acc_fake)

		# train the generator and discriminator
		def train(g_model, d_model, gan_model, latent_dim, n_epochs=5000, n_batch=150, n_eval=200):
			# determine half the size of one batch, for updating the discriminator
			half_batch = int(n_batch / 2)
			# manually enumerate epochs
			# Store the losses
			for j in range(n_epochs):
				# prepare real samples
				x_real, y_real = generate_real_samples(half_batch)
				# prepare fake examples
				x_fake, y_fake = generate_fake_samples(g_model, latent_dim, half_batch)
				# update discriminator
				d_loss_real, d_acc_real = d_model.train_on_batch(x_real, y_real)
				d_loss_fake, d_acc_fake = d_model.train_on_batch(x_fake, y_fake)
				d_loss = 0.5 * (d_loss_real + d_loss_fake)	
				d_acc  = 0.5 * (d_acc_real + d_acc_fake)
				# prepare points in latent space as input for the generator
				x_gan = generate_latent_points(latent_dim, n_batch)
				# create inverted labels for the fake samples
				y_gan = ones((n_batch, 1))
				# update the generator via the discriminator's error
				g_loss = gan_model.train_on_batch(x_gan, y_gan)
				# evaluate the model every n_eval epochs
				if (j+1) % n_eval == 0:
					summarize_performance(i, g_model, d_model, latent_dim)
				d_hist.append(d_loss)
				g_hist.append(g_loss)
				a_hist.append(d_acc)
			plot_history(d_hist, g_hist, a_hist)

		def plot_history(d_hist, g_hist, a_hist):
				# plot loss
				pyplot.subplot(2, 1, 1)
				pyplot.plot(d_hist, label='discriminator_loss', color='r')
				pyplot.plot(g_hist, label='generator_loss', color='b')
				pyplot.legend()
				#pyplot.savefig('plot_loss_'+str(i)+'.png')
				# plot discriminator accuracy
				pyplot.subplot(2, 1, 2)
				pyplot.plot(a_hist, label='discriminator_acc', color='g')
				pyplot.legend() 
				pyplot.savefig('plot_loss_accuracy_'+str(i)+'.png')

		def plot_data(df_sort, df):
				pyplot.subplot(1, 1, 1)
				pyplot.plot(df_sort, label='Synthetic_data')
				pyplot.plot(df, label='Original_data')
				pyplot.legend()
				pyplot.xlabel('next access')
				pyplot.ylabel('Time normalized')
				pyplot.show()
				#pyplot.savefig('plot_data_'+str(i)+'.png')
		
		# size of the latent space
		latent_dim = 5
		# create the discriminator
		discriminator = define_discriminator()
		# create the generator
		generator = define_generator(latent_dim)
		# create the gan
		gan_model = define_gan(generator, discriminator)
		# train model
		train(generator, discriminator, gan_model, latent_dim)

		X, y = generate_fake_samples(generator, latent_dim, 1000)
		#print(X)

		df_syn = pd.DataFrame(X)
		df_syn.columns=['Synthetic_data']
		df_sort = df_syn.sort_values(by=['Synthetic_data'], ignore_index=True)
		#print(df_sort)
		df_sort.to_csv('user_'+str(i)+'_syn.csv',
										index = None)
		plot_data(df_sort, df)